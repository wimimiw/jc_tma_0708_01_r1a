/*******************************Copyright (c)***********************************
 *
 *              Copyright (C), 1999-2011, Jointcom . Co., Ltd.
 *
 *------------------------------------------------------------------------------
 * @file	:dev_spi.h
 * @author	:mashuai
 * @version	:v2.0 
 * @date	:2011.10.20
 * @brief	:
 *------------------------------------------------------------------------------
 * @attention
 ******************************************************************************/
#ifndef __DEV_SPI_C__
#define __DEV_SPI_C__
#endif
/* Includes ------------------------------------------------------------------*/
#include "config.h"
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/**
  * @brief  :
  * @param  :None
  * @retval :None
  * @author	:mashuai
  * @version:v2.0
  * @date	:2011.10.20
  */
static void WriteGpioPin(U8 group, U8 pin, BOOL level)
{		
	GPIO_TypeDef*gpio;
	if( GPIO_PortSourceGPIOA == (pin>>8) )gpio = GPIOA;
	else if( GPIO_PortSourceGPIOB == (pin>>8) )gpio = GPIOB;
	else if( GPIO_PortSourceGPIOC == (pin>>8) )gpio = GPIOC;
	else if( GPIO_PortSourceGPIOD == (pin>>8) )gpio = GPIOD;
	GPIO_WriteBit(gpio,pin&0xff,(HIGH == level)?Bit_SET:Bit_RESET);
}
/*****************************************************************************************************************
** 函数名称   : chkMaskBit()
** 功能描述   : 用于检验掩码位对应的值
** 输入参数   : data   需要获取掩码的数据
**              mask   需要发送首位数据的掩码
**              order  数据发送的顺序
**              num    需要发送的位
** 输出参数   : 无
** 返    回   : 无
** 创建时间   : 2010.10.09
** 当前版本   : V1.0
** 作    者   : ZhangXL
**----------------------------------------------------------------------------------------------------------------
** 描    述   : 初始版本
** 修改时间   : 2010.10.09
** 修改版本   : V1.0
** 作    者   : ZhangXL
**----------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************/
static U8 ChkMaskBit(U32 data, U32 mask, U8 num, U8 order)
{

    if (MSB_FIRST == order)
    {
        mask >>= num;
    }
    else
    {
        mask <<= num;
    }

    return ((data & mask) == 0 ? LOW : HIGH);

}
/*****************************************************************************************************************
** 函数名称   : endSpiBus()
** 功能描述   : 结束PSI总线
** 输入参数   : spiType SPI接口的类型
**            : spiBus  SPI总线的通道
** 输出参数   : 无
** 返    回   : 无
** 创建时间   : 2010.10.09
** 当前版本   : V1.0
** 作    者   : ZhangXL
**----------------------------------------------------------------------------------------------------------------
** 描    述   : 初始版本
** 修改时间   : 2010.10.09
** 修改版本   : V1.0
** 作    者   : ZhangXL
**----------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************/
static void EndSpiBus( SPI_BUS * spiBus,SPI_TYPE * spiType )
{
    switch ( spiType->type )
    {
        case SPI_LEVEL_LOW:
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  HIGH);          /* 拉高使能脚                   */
            break;

        case SPI_LEVEL_HIGH:
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  LOW);           /* 拉低使能脚                   */
            break;

        case SPI_PULSE_LOW:
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  LOW);           /* 拉高使能脚                   */
            usdelay(40);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  HIGH);          /* 拉高使能脚                   */
            break;

        case SPI_PULSE_HIGH:
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  HIGH);          /* 拉低使能脚                   */
            usdelay(40);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  LOW);           /* 拉低使能脚                   */
            break;

        default:
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  HIGH);          /* 拉低使能脚                   */
            break;
    }
}
/*****************************************************************************************************************
** 函数名称   : startSpiBus()
** 功能描述   : 启动PSI总线
** 输入参数   : spiType SPI接口的类型
**            : spiBus  SPI总线的通道
** 输出参数   : 无
** 返    回   : 无
** 创建时间   : 2010.10.09
** 当前版本   : V1.0
** 作    者   : ZhangXL
**----------------------------------------------------------------------------------------------------------------
** 描    述   : 初始版本
** 修改时间   : 2010.10.09
** 修改版本   : V1.0
** 作    者   : ZhangXL
**----------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************/
static void StartSpiBus(SPI_BUS* spiBus,SPI_TYPE* spiType)
{
    switch ( spiType->type )
    {
        case SPI_LEVEL_LOW:
            WriteGpioPin(spiBus->clk[0],spiBus->clk[1], LOW);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  HIGH);          /* 拉高使能脚                   */
            usdelay(120);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  LOW);           /* 拉低使能脚                   */
            break;

        case SPI_LEVEL_HIGH:
            WriteGpioPin(spiBus->clk[0],spiBus->clk[1], LOW);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  LOW);           /* 拉低使能脚                   */
            usdelay(120);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  HIGH);          /* 拉高使能脚                   */
            break;

        case SPI_PULSE_LOW:
            WriteGpioPin(spiBus->clk[0],spiBus->clk[1], LOW);
            usdelay(120);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  HIGH);          /* 拉高使能脚                   */
            break;

        case SPI_PULSE_HIGH:
            WriteGpioPin(spiBus->clk[0],spiBus->clk[1], LOW);
            usdelay(120);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  LOW);           /* 拉低使能脚                   */
            break;

        default:
            WriteGpioPin(spiBus->clk[0],spiBus->clk[1], LOW);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  HIGH);          /* 拉高使能脚                   */
            usdelay(120);
            WriteGpioPin(spiBus->cs[0],spiBus->cs[1],  LOW);           /* 拉低使能脚                   */
            break;
    }
}
/*****************************************************************************************************************
** 函数名称   : writeSpiOneWord()
** 功能描述   : 从PSI接口写一个字
** 输入参数   : spiType SPI接口的类型
**            : spiBus  SPI总线的通道
**            : spiWord SPI需要发送的数据
** 输出参数   : 无
** 返    回   : 无
** 创建时间   : 2010.10.09
** 当前版本   : V1.0
** 作    者   : ZhangXL
**----------------------------------------------------------------------------------------------------------------
** 描    述   : 初始版本
** 修改时间   : 2010.10.09
** 修改版本   : V1.0
** 作    者   : ZhangXL
**----------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************/
U8 WriteSpiOneWord(SPI_BUS* spiBus, SPI_TYPE* spiType, U32 spiWord)
{
    U8 i;
    U8 data;

    /* 启动SPI总线  */
    StartSpiBus(spiBus,spiType);

    /* 发送数据位   */
    for (i = 0; i < spiType->len; i++)                                              /* SPI数据发送                  */
    {

        data = ChkMaskBit(spiWord, spiType->mask, i, spiType->order);               /* 设置数据脚电平               */

        usdelay(120);
        WriteGpioPin(spiBus->data, data);
        usdelay(120);
        WriteGpioPin(spiBus->clk[0],spiBus->clk[1],  HIGH);            /* 产生时钟脉冲                 */
        usdelay(120);
        WriteGpioPin(spiBus->clk[0],spiBus->clk[1],   LOW);
    }

    /* 结束SPI总线  */
    usdelay(240);
    EndSpiBus( spiBus,spiType );

    return TRUE;

}
/********************************END OF FILE***********************************/
