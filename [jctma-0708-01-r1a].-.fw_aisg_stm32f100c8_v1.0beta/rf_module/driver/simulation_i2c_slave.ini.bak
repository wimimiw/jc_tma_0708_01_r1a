// Simulation of I2C Memory (Slave)

MAP V:0,V:0xFFFF READ WRITE                  // Map User 64kB Memory region

DEFINE int SADR                              // Slave Address

signal void I2cSent(void) {
  unsigned long  i;
  unsigned long  adr;
  adr = V:0;
  
  I2C_CLK = 100000;
  while (1) {
    // Master Transmitter
    I2C2_IN = 0x0100;
    I2C2_IN = SADR << 1;								
    wwatch (I2C2_OUT);                  // Wait for ACK from Microcontroller
    if (I2C2_OUT != 0xFF00) break;
		
		for(i=0;i<5;i++)
		{
    	I2C2_IN = _RBYTE(adr);              // Read Byte from Memory
    	adr++;                             // Increment Address
    	wwatch (I2C2_OUT);                  // Wait for ACK from Microcontroller
    	if (i<4)if (I2C2_OUT != 0xFF00) break; 
    }
    
   	// Master Receive
       
//    wwatch (I2C2_OUT);                        // Wait for data from Microcontroller
//    while (I2C2_OUT == 0x0100) {              // START detected
//
//      else {                                 // Slave Write
//        wwatch (I2C2_OUT);                    // Wait for data from Microcontroller
//        if (I2C2_OUT > 0xFF) continue;
//        adr = (I2C2_OUT << 8) | V:0;          // Set Memory Address High Byte
//        I2C2_IN = 0xFF00;                     // ACK to Microcontroller
//        wwatch (I2C2_OUT);                    // Wait for data from Microcontroller
//        if (I2C2_OUT > 0xFF) continue;
//        adr = I2C2_OUT | adr;                 // Set Memory Address Low Byte
//        I2C2_IN = 0xFF00;                     // ACK to Microcontroller
//        while (1) {
//          wwatch (I2C2_OUT);                  // Wait for data from Microcontroller
//          if (I2C2_OUT > 0xFF) break;
//          _WBYTE (adr, I2C2_OUT);             // Store Byte in Memory
//          adr++;                             // Increment Address
//          I2C2_IN = 0xFF00;                   // ACK to Microcontroller
//        }
//      } 
//    }
  }
}

SADR = 0x12
I2cSent()