// Simulation of I2C Memory (Slave)

MAP V:0,V:0xFFFF READ WRITE                  // Map User 64kB Memory region

DEFINE int SADR                              // Slave Address

signal void I2CMEMORY (void) {
  static unsigned long  adr;

  adr = V:0;
  while (1) {
    wwatch (I2C2_OUT);                        // Wait for data from Microcontroller
    while (I2C2_OUT == 0x0100) {              // START detected
      wwatch (I2C2_OUT);                      // Wait for data from Microcontroller
      if (I2C2_OUT > 0xFF) continue;
      if ((I2C2_OUT >> 1) != SADR) continue;  // test if Slave is addressed
      I2C2_IN = 0xFF00;                       // ACK to Microcontroller
      if (I2C2_OUT & 1) {                     // Slave Read
        while (1) {  
          I2C2_IN = _RBYTE(adr);              // Read Byte from Memory
          adr++;                             // Increment Address
          wwatch (I2C2_OUT);                  // Wait for ACK from Microcontroller
          if (I2C2_OUT != 0xFF00) break;
        }
      }
      else {                                 // Slave Write
        wwatch (I2C2_OUT);                    // Wait for data from Microcontroller
        if (I2C2_OUT > 0xFF) continue;
        adr = (I2C2_OUT << 8) | V:0;          // Set Memory Address High Byte
        I2C2_IN = 0xFF00;                     // ACK to Microcontroller
        wwatch (I2C2_OUT);                    // Wait for data from Microcontroller
        if (I2C2_OUT > 0xFF) continue;
        adr = I2C2_OUT | adr;                 // Set Memory Address Low Byte
        I2C2_IN = 0xFF00;                     // ACK to Microcontroller
        while (1) {
          wwatch (I2C2_OUT);                  // Wait for data from Microcontroller
          if (I2C2_OUT > 0xFF) break;
          _WBYTE (adr, I2C2_OUT);             // Store Byte in Memory
          adr++;                             // Increment Address
          I2C2_IN = 0xFF00;                   // ACK to Microcontroller
        }
      } 
    }
  }
}


SADR = 0x54  // Slave Address
I2CMemory()  // Starting signal function